@using Application.DTOs.External
@using Application.Requests
@using MediatR
@inject IMediator Mediator;

@if (_googleBook == null)
{
    <div>Loading..</div>
}
else
{
    <div class="book-layout">
        <img src="@_googleBook!.ThumbnailUrl" alt="pic"/>
        <div class="book-info-layout">
            <div class="book-title">
                @_googleBook!.Title<div class="book-author">, by @string.Join(", ", _googleBook.Authors)</div>
            </div>
            <div class="book-subtitle">
                @_googleBook!.Subtitle
                <div class="book-publisher">@_googleBook!.Publisher</div>
                <div class="book-avgRating">Google Books Rating: @_googleBook!.AverageRating / 5</div>
            </div>
            <div class="book-description">
                @((MarkupString) _googleBook!.Description)
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public string GoogleId { get; set; } = "some-id";

    [Parameter]
    public string MyOpinion { get; set; } = "Comment..";

    private GoogleBookDto? _googleBook;
    protected override async Task OnInitializedAsync()
    {
        if (_googleBook == null)
        {
            var bookRequest = new GetGoogleBookRequest(GoogleId);
            _googleBook = await Mediator.Send(bookRequest);
        }
        await base.OnInitializedAsync();
    }
}